#include "CChannel.h"
static int thread_id = 173; // the seed for  vslNewStream function Noise channel seed

#if CONTINUE_SEED
const unsigned long lastSeed[MAX_THREADS][3] = { { 12678, 39522, 25973 }, { 20905, 3872, 18931 }, { 37359, 59458, 4847 },
    { 45586, 23808, 61404 }, { 73, 15951, 47320 }, { 57662, 20173, 61625 }, { 12149, 12316, 47541 },
    { 36830, 32252, 26415 }, { 45057, 60045, 19373 }, { 24225, 8681, 47762 }, { 32452, 36474, 40720 },
    { 57133, 56410, 19594 }, { 19847, 12903, 62067 }, { 36301, 5046, 47983 }, { 60982, 24982, 26857 },
    { 23696, 44918, 5731 }, { 31923, 9268, 62288 }, { 11091, 21347, 27078 }, { 19318, 49140, 20036 },
    { 35772, 41283, 5952 }, { 43999, 5633, 62509 }, { 31394, 45505, 20257 }, { 18789, 21934, 41604 },
    { 43470, 41870, 20478 }, { 59924, 34013, 6394 }, { 22638, 53949, 48867 }, { 30865, 18299, 41825 },
    { 10033, 30378, 6615 }, { 34714, 50314, 49088 }, { 59395, 6807, 27962 }, { 22109, 26743, 6836 },
    { 30336, 54536, 63393 }, { 55017, 11029, 42267 }, { 9504, 3172, 28183 }, { 17731, 30965, 21141 },
    { 58866, 43044, 49530 }, { 54488, 47266, 236 }, { 8975, 39409, 49751 }, { 17202, 3759, 42709 },
    { 33656, 59345, 28625 }, { 29278, 124, 42930 }, { 53959, 20060, 21804 }, { 33127, 32139, 50193 },
    { 41354, 59932, 43151 }, { 57808, 52075, 29067 }, { 20522, 8568, 7941 }, { 53430, 56297, 43372 },
    { 16144, 12790, 22246 }, { 40825, 32726, 1120 }, { 57279, 24869, 50635 }, { 19993, 44805, 29509 },
    { 52901, 29091, 1341 }, { 7388, 21234, 50856 }, { 40296, 5520, 22688 }, { 19464, 17599, 51077 },
    { 27691, 45392, 44035 }, { 6859, 57471, 8825 }, { 15086, 21821, 1783 }, { 39767, 41757, 44256 },
    { 56221, 33900, 30172 }, { 18935, 53836, 9046 }, { 51843, 38122, 44477 }, { 6330, 30265, 30393 },
    { 14557, 58058, 23351 }, { 31011, 50201, 9267 }, { 18406, 26630, 30614 }, { 51314, 10916, 2446 },
    { 5801, 3059, 51961 }, { 38709, 50788, 23793 }, { 55163, 42931, 9709 }, { 9650, 35074, 59224 },
    { 5272, 39296, 9930 }, { 13499, 3646, 2888 }, { 25575, 11, 3109 }, { 50256, 19947, 45582 }, { 54105, 51962, 52845 },
    { 16819, 8455, 31719 }, { 25046, 36248, 24677 }, { 49727, 56184, 3551 }, { 28895, 4820, 31940 },
    { 53576, 24756, 10814 }, { 16290, 44692, 53287 }, { 24517, 9042, 46245 }, { 49198, 28978, 25119 },
    { 11912, 48914, 3993 }, { 28366, 41057, 53508 }, { 36593, 5407, 46466 }, { 23988, 45279, 4214 },
    { 3156, 57358, 32603 }, { 11383, 21708, 25561 }, { 27837, 13851, 11477 }, { 52518, 33787, 53950 },
    { 15232, 53723, 32824 }, { 23459, 18073, 25782 }, { 10854, 57945, 47129 }, { 27308, 50088, 33045 },
    { 51989, 6581, 11919 }, { 22930, 54310, 47350 }, { 2098, 2946, 12140 }, { 35006, 50675, 47571 },
    { 14174, 62754, 12361 }, { 47082, 47040, 47792 }, { 9796, 3533, 26666 }, { 34477, 23469, 5540 },
    { 50931, 15612, 55055 }, { 21872, 63341, 26887 }, { 46553, 19834, 5761 }, { 1040, 11977, 55276 },
    { 33948, 59706, 27108 }, { 50402, 51849, 13024 }, { 46024, 56071, 27329 }, { 25192, 4707, 55718 },
    { 12587, 44579, 13466 }, { 20814, 8929, 6424 }, { 61949, 21008, 34813 }, { 8209, 48801, 27771 },
    { 24663, 40944, 13687 }, { 32890, 5294, 6645 }, { 12058, 17373, 35034 }, { 47228, 15499, 15234 },
    { 24134, 13738, 35255 }, { 32361, 41531, 28213 }, { 48815, 33674, 14129 }, { 44437, 37896, 28434 },
    { 60891, 30039, 14350 }, { 7151, 57832, 7308 }, { 23605, 49975, 56823 }, { 43908, 10690, 50002 },
    { 60362, 2833, 35918 }, { 31303, 50562, 7750 }, { 10471, 62641, 36139 }, { 43379, 46927, 7971 },
    { 59833, 39070, 57486 }, { 22547, 59006, 36360 }, { 47228, 15499, 15234 }, { 42850, 19721, 29539 },
    { 59304, 11864, 15455 }, { 22018, 31800, 57928 }, { 46699, 51736, 36802 }, { 17640, 36022, 8634 },
    { 42321, 55958, 51107 }, { 29716, 32387, 8855 }, { 46170, 24530, 58370 } };
#endif

CChannel::CChannel()
    : SymbolSeq(nullptr)
    , BPSKSymbol(nullptr)
    , SymbolLen(0)
{
    // Approach 1
    int status = vslNewStream(&stream, VSL_BRNG_MT2203 + thread_id++, rand());
    if (VSL_STATUS_OK != status) {
        printf("Error during vslNewStream excution\n");
        printf("Thread id=%d\n", thread_id);

        exit(EXIT_FAILURE);
    }
    // Approach 2
    RS.IX = RS.IY = RS.IZ = 0;
}

CChannel::~CChannel()
{
    if (SymbolSeq) {
        free(SymbolSeq);
    }
    if (BPSKSymbol) {
        free(BPSKSymbol);
    }
    vslDeleteStream(&stream);
}

float CChannel::Random_Uniform(RandSeed& rs)
{
    float temp = 0.0;
    rs.IX = (rs.IX * 249) % 61967;
    rs.IY = (rs.IY * 251) % 63443;
    rs.IZ = (rs.IZ * 252) % 63599;
    temp = (((float)rs.IX) / ((float)61967)) + (((float)rs.IY) / ((float)63443)) + (((float)rs.IZ) / ((float)63599));
    temp -= (int)temp;
    return temp;
}

float CChannel::Random_Norm(double sigma, RandSeed& rs)
{
    float u1, u2, u;
    u1 = Random_Uniform(rs);
    u2 = Random_Uniform(rs);
    u = sigma * cos(2 * 3.1415926535897932384626433832795 * u2) * sqrt(-2.0 * log(1.0 - u1));
    return u;
}
void CChannel::AWGNChannel(MKL_Complex8* inSymbolSeq, float sigma)
{
    unsigned long i;
    for (i = 0; i < SymbolLen; i++) {
        SymbolSeq[i].real = Random_Norm(sigma, RS) + inSymbolSeq[i].real;
        SymbolSeq[i].imag = Random_Norm(sigma, RS) + inSymbolSeq[i].imag;
    }
}
/*
    BPSKSymbol: Use for generate Gaussian noise

*/
void CChannel::BPSKAWGNChannel(float* inSymbolSeq, float sigma)
{
    unsigned long i;
    vsRngGaussian(1, stream, SymbolLen, BPSKSymbol, 0.0f, sigma);
    for (i = 0; i < SymbolLen; ++i) {
        BPSKSymbol[i] = inSymbolSeq[i] + BPSKSymbol[i];
    }
}

// Initial
void CChannel::Initial(unsigned long len, int index)
{
    SymbolLen = len;
    SymbolSeq = (MKL_Complex8*)vec_malloc(sizeof(MKL_Complex8) * SymbolLen); // new MKL_Complex8[SymbolLen];
    BPSKSymbol = (float*)vec_malloc(sizeof(float) * SymbolLen);
#if CONTINUE_SEED
    RS.IX = lastSeed[index][0];
    RS.IY = lastSeed[index][1];
    RS.IZ = lastSeed[index][2];
#else
	RS.IX = RS.IY = RS.IZ = RandomSeed;
#endif
}
